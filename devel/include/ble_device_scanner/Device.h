// Generated by gencpp from file ble_device_scanner/Device.msg
// DO NOT EDIT!


#ifndef BLE_DEVICE_SCANNER_MESSAGE_DEVICE_H
#define BLE_DEVICE_SCANNER_MESSAGE_DEVICE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ble_device_scanner/DeviceTuple.h>

namespace ble_device_scanner
{
template <class ContainerAllocator>
struct Device_
{
  typedef Device_<ContainerAllocator> Type;

  Device_()
    : rssi()
    , addr()
    , data()  {
    }
  Device_(const ContainerAllocator& _alloc)
    : rssi(_alloc)
    , addr(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rssi_type;
  _rssi_type rssi;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _addr_type;
  _addr_type addr;

   typedef std::vector< ::ble_device_scanner::DeviceTuple_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ble_device_scanner::DeviceTuple_<ContainerAllocator> >::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::ble_device_scanner::Device_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ble_device_scanner::Device_<ContainerAllocator> const> ConstPtr;

}; // struct Device_

typedef ::ble_device_scanner::Device_<std::allocator<void> > Device;

typedef boost::shared_ptr< ::ble_device_scanner::Device > DevicePtr;
typedef boost::shared_ptr< ::ble_device_scanner::Device const> DeviceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ble_device_scanner::Device_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ble_device_scanner::Device_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ble_device_scanner

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ble_device_scanner': ['/home/pieter/turtlebot_ws/src/ble_device_scanner/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ble_device_scanner::Device_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ble_device_scanner::Device_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ble_device_scanner::Device_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ble_device_scanner::Device_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ble_device_scanner::Device_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ble_device_scanner::Device_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ble_device_scanner::Device_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e03a19bb1ab8f84d7afc20ee8710cc46";
  }

  static const char* value(const ::ble_device_scanner::Device_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe03a19bb1ab8f84dULL;
  static const uint64_t static_value2 = 0x7afc20ee8710cc46ULL;
};

template<class ContainerAllocator>
struct DataType< ::ble_device_scanner::Device_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ble_device_scanner/Device";
  }

  static const char* value(const ::ble_device_scanner::Device_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ble_device_scanner::Device_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string rssi\n\
string addr\n\
ble_device_scanner/DeviceTuple[] data\n\
\n\
================================================================================\n\
MSG: ble_device_scanner/DeviceTuple\n\
string adtype\n\
string description\n\
string value\n\
";
  }

  static const char* value(const ::ble_device_scanner::Device_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ble_device_scanner::Device_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rssi);
      stream.next(m.addr);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Device_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ble_device_scanner::Device_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ble_device_scanner::Device_<ContainerAllocator>& v)
  {
    s << indent << "rssi: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rssi);
    s << indent << "addr: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.addr);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ble_device_scanner::DeviceTuple_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLE_DEVICE_SCANNER_MESSAGE_DEVICE_H
